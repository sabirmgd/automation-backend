import { JobAnalysisOutput } from '../schemas/job-analysis.schema';

export function formatJobAnalysisComment(
  analysis: JobAnalysisOutput,
  jobName: string,
  jobUrl?: string
): string {
  const confidenceEmoji = {
    high: '🟢',
    medium: '🟡',
    low: '🔴',
  };

  const failureTypeEmoji = {
    syntax_error: '📝',
    configuration_error: '⚙️',
    dependency_issue: '📦',
    resource_constraint: '💾',
    permission_issue: '🔒',
    network_issue: '🌐',
    test_failure: '🧪',
    build_error: '🔨',
    environment_issue: '🌍',
    external_service: '🔌',
    unknown: '❓',
  };

  const emoji = failureTypeEmoji[analysis.failureType] || '❓';
  const confidence = confidenceEmoji[analysis.confidence] || '🔴';

  let comment = `## ${emoji} Job Analysis: ${jobName}\n\n`;

  if (jobUrl) {
    comment += `📍 [View Job Logs](${jobUrl})\n\n`;
  }

  comment += `### 🔍 Root Cause\n`;
  comment += `${analysis.rootCause}\n\n`;

  comment += `### 📊 Analysis Details\n`;
  comment += `- **Failure Type:** ${analysis.failureType.replace(/_/g, ' ')}\n`;
  comment += `- **Affected Component:** ${analysis.affectedComponent}\n`;
  comment += `- **Confidence:** ${confidence} ${analysis.confidence}\n`;

  if (analysis.estimatedFixTime) {
    comment += `- **Estimated Fix Time:** ${analysis.estimatedFixTime}\n`;
  }
  comment += '\n';

  if (analysis.errorDetails && analysis.errorDetails.length > 0) {
    comment += `### 🚨 Error Details\n`;
    analysis.errorDetails.forEach(error => {
      comment += `- ${error}\n`;
    });
    comment += '\n';
  }

  comment += `### 🛠️ Suggested Fix\n`;
  if (analysis.suggestedFixSteps && analysis.suggestedFixSteps.length > 0) {
    analysis.suggestedFixSteps.forEach((step, index) => {
      comment += `${index + 1}. ${step}\n`;
      if (
        analysis.suggestedFixCommands &&
        analysis.suggestedFixCommands[index]
      ) {
        comment += `   \`\`\`bash\n   ${analysis.suggestedFixCommands[index]}\n   \`\`\`\n`;
      }
    });
    comment += '\n';
  }

  if (analysis.relatedFiles && analysis.relatedFiles.length > 0) {
    comment += `### 📁 Related Files\n`;
    analysis.relatedFiles.forEach(file => {
      comment += `- \`${file}\`\n`;
    });
    comment += '\n';
  }

  if (analysis.preventionTips && analysis.preventionTips.length > 0) {
    comment += `### 💡 Prevention Tips\n`;
    analysis.preventionTips.forEach(tip => {
      comment += `- ${tip}\n`;
    });
    comment += '\n';
  }

  if (analysis.additionalContext) {
    comment += `### ℹ️ Additional Context\n`;
    comment += `${analysis.additionalContext}\n\n`;
  }

  comment += `---\n`;
  comment += `*Generated by CI/CD Analysis Bot* 🤖\n`;

  return comment;
}

export function formatJobAnalysisSummary(
  analyses: Array<{ jobName: string; analysis: JobAnalysisOutput }>
): string {
  if (analyses.length === 0) {
    return '';
  }

  let summary = `## 📊 Job Failure Summary\n\n`;
  summary += `Found ${analyses.length} failed job(s):\n\n`;

  analyses.forEach(({ jobName, analysis }) => {
    const emoji = getFailureTypeEmoji(analysis.failureType);
    summary += `### ${emoji} ${jobName}\n`;
    summary += `- **Type:** ${analysis.failureType.replace(/_/g, ' ')}\n`;
    summary += `- **Cause:** ${analysis.rootCause}\n`;
    summary += `- **Quick Fix:** ${
      analysis.suggestedFixSteps[0] || 'Review logs for details'
    }\n\n`;
  });

  return summary;
}

function getFailureTypeEmoji(failureType: string): string {
  const emojiMap: Record<string, string> = {
    syntax_error: '📝',
    configuration_error: '⚙️',
    dependency_issue: '📦',
    resource_constraint: '💾',
    permission_issue: '🔒',
    network_issue: '🌐',
    test_failure: '🧪',
    build_error: '🔨',
    environment_issue: '🌍',
    external_service: '🔌',
    unknown: '❓',
  };

  return emojiMap[failureType] || '❓';
}