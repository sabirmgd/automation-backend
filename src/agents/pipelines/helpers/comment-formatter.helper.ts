import { PipelineAnalysisOutput } from '../schemas/pipeline-analysis.schema';

export function formatPipelineAnalysisComment(
  analysis: PipelineAnalysisOutput,
  pipelineName: string,
  pipelineUrl?: string,
  platform: 'github' | 'gitlab' = 'gitlab'
): string {
  const confidenceEmoji = {
    high: '🟢',
    medium: '🟡',
    low: '🔴',
  };

  const failureTypeEmoji = {
    yaml_syntax_error: '📝',
    job_dependency_error: '🔗',
    missing_job_definition: '❌',
    invalid_configuration: '⚙️',
    resource_constraint: '💾',
    permission_issue: '🔒',
    network_issue: '🌐',
    multiple_job_failures: '🔥',
    pipeline_timeout: '⏱️',
    external_service: '🔌',
    unknown: '❓',
  };

  const emoji = failureTypeEmoji[analysis.failureType] || '❓';
  const confidence = confidenceEmoji[analysis.confidence] || '🔴';

  let comment = `## ${emoji} Pipeline Analysis: ${pipelineName}\n\n`;

  if (pipelineUrl) {
    comment += `📍 [View Pipeline](${pipelineUrl})\n\n`;
  }

  comment += `### 🔍 Root Cause\n`;
  comment += `${analysis.rootCause}\n\n`;

  comment += `### 📊 Analysis Details\n`;
  comment += `- **Failure Type:** ${analysis.failureType.replace(/_/g, ' ')}\n`;
  comment += `- **Affected Component:** ${analysis.affectedComponent}\n`;
  comment += `- **Confidence:** ${confidence} ${analysis.confidence}\n`;

  if (analysis.estimatedFixTime) {
    comment += `- **Estimated Fix Time:** ${analysis.estimatedFixTime}\n`;
  }
  comment += '\n';

  if (analysis.failedJobNames && analysis.failedJobNames.length > 0) {
    comment += `### 🚫 Failed Jobs\n`;
    analysis.failedJobNames.forEach((jobName, index) => {
      const stage = analysis.failedJobStages?.[index] || 'unknown';
      comment += `- ${jobName} (stage: ${stage})\n`;
    });
    comment += '\n';
  }

  if (analysis.errorDetails && analysis.errorDetails.length > 0) {
    comment += `### 🚨 Error Details\n`;
    analysis.errorDetails.forEach(error => {
      comment += `- ${error}\n`;
    });
    comment += '\n';
  }

  comment += `### 🛠️ Suggested Fix\n`;
  if (analysis.suggestedFixSteps && analysis.suggestedFixSteps.length > 0) {
    analysis.suggestedFixSteps.forEach((step, index) => {
      comment += `${index + 1}. ${step}\n`;
      if (
        analysis.suggestedFixCommands &&
        analysis.suggestedFixCommands[index]
      ) {
        comment += `   \`\`\`${platform === 'github' ? 'yaml' : 'yaml'}\n   ${analysis.suggestedFixCommands[index]}\n   \`\`\`\n`;
      }
    });
    comment += '\n';
  }

  if (analysis.relatedFiles && analysis.relatedFiles.length > 0) {
    comment += `### 📁 Related Files\n`;
    analysis.relatedFiles.forEach(file => {
      comment += `- \`${file}\`\n`;
    });
    comment += '\n';
  }

  if (analysis.preventionTips && analysis.preventionTips.length > 0) {
    comment += `### 💡 Prevention Tips\n`;
    analysis.preventionTips.forEach(tip => {
      comment += `- ${tip}\n`;
    });
    comment += '\n';
  }

  if (analysis.additionalContext) {
    comment += `### ℹ️ Additional Context\n`;
    comment += `${analysis.additionalContext}\n\n`;
  }

  comment += `---\n`;
  comment += `*Generated by CI/CD Pipeline Analyzer* 🤖\n`;

  return comment;
}

export function formatPipelineAnalysisSummary(
  analyses: Array<{
    pipelineName: string;
    analysis: PipelineAnalysisOutput;
    failedJobsCount: number;
    totalJobsCount: number;
  }>
): string {
  if (analyses.length === 0) {
    return '';
  }

  let summary = `## 📊 Pipeline Failure Summary\n\n`;
  summary += `Analyzed ${analyses.length} failed pipeline(s):\n\n`;

  analyses.forEach(({ pipelineName, analysis, failedJobsCount, totalJobsCount }) => {
    const emoji = getPipelineFailureEmoji(analysis.failureType);
    summary += `### ${emoji} ${pipelineName}\n`;
    summary += `- **Type:** ${analysis.failureType.replace(/_/g, ' ')}\n`;
    summary += `- **Failed Jobs:** ${failedJobsCount}/${totalJobsCount}\n`;
    summary += `- **Root Cause:** ${analysis.rootCause}\n`;
    summary += `- **Quick Fix:** ${
      analysis.suggestedFixSteps[0] || 'Review pipeline configuration'
    }\n\n`;
  });

  return summary;
}

function getPipelineFailureEmoji(failureType: string): string {
  const emojiMap: Record<string, string> = {
    yaml_syntax_error: '📝',
    job_dependency_error: '🔗',
    missing_job_definition: '❌',
    invalid_configuration: '⚙️',
    resource_constraint: '💾',
    permission_issue: '🔒',
    network_issue: '🌐',
    multiple_job_failures: '🔥',
    pipeline_timeout: '⏱️',
    external_service: '🔌',
    unknown: '❓',
  };

  return emojiMap[failureType] || '❓';
}